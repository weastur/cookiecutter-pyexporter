{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyexporter","text":"<p>Template for a Prometheus exporter for various metrics.</p>"},{"location":"#installation","title":"Installation","text":"<p>The exporter is written in Python. The simplest way to run it is to use the Docker image.</p> Bash<pre><code>docker run -d -p 9123:9123 weastur/py-exporter:latest\n</code></pre> <p>Additionally, as it's a standard Python package, you can install it with <code>pip</code> or <code>pipx</code>:</p> Bash<pre><code>pip install py-exporter\n</code></pre> <p>An isolated installation using a virtual environment can be found in the examples.</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#configuring","title":"Configuring","text":"<p>There are several ways to configure the exporter (in a priority order):</p> <ul> <li>Defaults</li> <li>Command line arguments</li> <li>Environment variables</li> <li><code>.env</code> file in the current directory</li> <li>Configuration file (<code>config.yaml</code> or <code>config.yml</code>) in the current directory</li> </ul>"},{"location":"#defaults-and-command-line-arguments","title":"Defaults and command line arguments","text":"<p>The exporter can be run with or without arguments (using defaults). See the full list of parameters with defaults below.</p>"},{"location":"#environment-variables","title":"Environment variables","text":"<p>All parameters can be set with environment variables. The environment variables should be in the following format: <code>PY_EXPORTER_&lt;PARAMETER_PATH&gt;</code> using <code>__</code> as a nested delimeter (replacing <code>.</code> in command line arguments) For example:</p> Bash<pre><code>export PY_EXPORTER_LOG__LEVEL=debug\nexport PY_EXPORTER_COLLECTOR__DEFAULT__GC=false\n</code></pre>"},{"location":"#env-file","title":"<code>.env</code> file","text":"<p>The <code>.env</code> file should be in the current directory and follow this format:</p> Bash<pre><code>PY_EXPORTER_LOG__LEVEL=debug\nPY_EXPORTER_COLLECTOR__DEFAULT__GC=false\n</code></pre>"},{"location":"#configuration-file","title":"Configuration file","text":"<p>The configuration file should be in the current directory and follow this format:</p> YAML<pre><code>log:\n  level: debug\nweb:\n  port: 9123\n  addr: \"0.0.0.0\"\n</code></pre> <p>See the full example here.</p> <p>P. S. By the way, you can dump json schema for the configuration file with the following command:</p> Bash<pre><code>py-exporter jsonschema config.schema.json\n</code></pre>"},{"location":"#full-list-of-command-line-arguments","title":"Full list of command line arguments","text":"Bash<pre><code>usage: py-exporter [-h]\n                   [--log.level {trace,debug,info,success,warning,error,critical}]\n                   [--web.port int] [--web.addr IPv4Address]\n                   [--web.tls.cert Path] [--web.tls.key Path]\n                   [--web.tls.protocol int]\n                   [--web.tls.mtls.enabled | --no-web.tls.mtls.enabled]\n                   [--web.tls.mtls.cafile Path] [--web.tls.mtls.capath Path]\n                   [--collector.disable_created_series | --no-collector.disable_created_series]\n                   [--collector.default.gc | --no-collector.default.gc]\n                   [--collector.default.platform | --no-collector.default.platform]\n                   [--collector.default.process | --no-collector.default.process]\n                   {jsonschema} ...\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nsubcommands:\n  {jsonschema}\n    jsonschema          Dump the JSON schema to a file.\n\nlog options:\n  --log.level {trace,debug,info,success,warning,error,critical}\n                        Log level (default: info)\n\nweb options:\n  --web.port int        Port to listen on (default: 9123)\n  --web.addr IPv4Address\n                        Address to listen on (default: 0.0.0.0)\n\nweb.tls options:\n  --web.tls.cert Path   Path to the TLS certificate (default: None)\n  --web.tls.key Path    Path to the TLS key (default: None)\n  --web.tls.protocol int\n                        TLS protocol number, as described in the ssl python\n                        module (default: 17)\n\nweb.tls.mtls options:\n  --web.tls.mtls.enabled, --no-web.tls.mtls.enabled\n                        Enable mTLS (default: False)\n  --web.tls.mtls.cafile Path\n                        Path to the client CA file (default: None)\n  --web.tls.mtls.capath Path\n                        Path to the client CA directory (default: None)\n\ncollector options:\n  --collector.disable_created_series, --no-collector.disable_created_series\n                        Disable created series (default: False)\n\ncollector.default options:\n  --collector.default.gc, --no-collector.default.gc\n                        Enable the GC collector (default: True)\n  --collector.default.platform, --no-collector.default.platform\n                        Enable the platform collector (default: True)\n  --collector.default.process, --no-collector.default.process\n                        Enable the process collector (default: True)\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>In the examples you can find some useful files to look at:</p> <ul> <li>Docker Compose file example</li> <li>Prometheus coinfig to scrape the exporter</li> <li>Grafana dashboard</li> <li>VRL program for Vector</li> <li>SystemD service file for running the exporter outside the container</li> <li>Ansible playbook to deploy it in an isolated environment outside the container</li> <li>Full dump (one scrape) of all metrics exporter can generate.   You can investigate it with prom2json</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<ul> <li>Read the contribution guide</li> <li>Don't forget to take a quick look at code of conduct</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>Although the license doesn\u2019t require credits, I maintain a list of authors in the CREDITS file in the alphabetical order.</p>"},{"location":"#license","title":"License","text":"<p>MIT, see LICENSE</p>"},{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":"<p>I am committed to maintaining a friendly and inclusive community. To ensure a positive environment, please follow these guidelines:</p> <ol> <li>Be Respectful:    Treat everyone with respect and kindness.    Discrimination, harassment, or offensive behavior is not tolerated.</li> <li>Be Supportive:    Help others whenever you can and be open to receiving help.    Constructive feedback is encouraged.</li> <li>Be Inclusive:    Welcome people of all backgrounds, identities, and abilities.    Respect differing opinions and experiences.</li> <li>Stay on Topic: Keep discussions relevant to the project.    Avoid spamming or promoting unrelated content.</li> </ol> <p>If you encounter behavior that violates this code of conduct, please contact me directly at me@weastur.com.</p> <p>Thank you for helping create a welcoming community!</p>"},{"location":"CONTRIBUTING/","title":"Contributing Guidelines","text":"<p>I appreciate any contributions you make! Every bit helps, and I\u2019ll always give credit.</p>"},{"location":"CONTRIBUTING/#how-you-can-contribute","title":"How You Can Contribute","text":"<ul> <li>Report bugs</li> <li>Fix bugs</li> <li>Suggest features</li> <li>Implement features</li> <li>Improve documentation</li> <li>Join discussions</li> <li>Share the project</li> <li>Show support (thanks/donations)</li> </ul>"},{"location":"CONTRIBUTING/#development","title":"Development","text":""},{"location":"CONTRIBUTING/#getting-started","title":"Getting Started","text":"<p>Clone the repository and install dependencies:</p> <ul> <li>uv</li> <li>pre-commit</li> <li>docker</li> <li>shellcheck</li> </ul> <p>Bootstrap the development environment:</p> Bash<pre><code>make bootstrap\n</code></pre> <p>This will install and run pre-commit hooks, Python, create a virtual environment, install dependencies inside it, build the app (including the Docker image), and run tests. If everything is fine, you can start the app with:</p> Bash<pre><code>uv run py-exporter\n</code></pre> <p>P.S. Although <code>uv</code> has a great ability to run anything from inside the <code>.venv</code> by using <code>uv run</code>, you may find it useful to activate the virtual environment manually:</p> Bash<pre><code>source .venv/bin/activate\n</code></pre>"},{"location":"CONTRIBUTING/#tests","title":"Tests","text":"<p>Tests are written with pytest. Some tests might run with testcontainers. You can run tests with:</p> Bash<pre><code>make test\n</code></pre>"},{"location":"CONTRIBUTING/#build","title":"Build","text":"<p>You can build the app with:</p> Bash<pre><code>make build\n</code></pre> <p>A Dockerized app will be built and tagged as <code>py-exporter:latest</code> and <code>py-exporter:${version}</code></p> Bash<pre><code>make docker-build\n</code></pre>"},{"location":"CONTRIBUTING/#docs","title":"Docs","text":"<p>Documentation is written in markdown and located in the <code>docs</code> directory. You can preview it by running:</p> Bash<pre><code>make docs-dev\n</code></pre> <p>You may also want to consult with the mkdocs and mkdocs-material documentation.</p>"},{"location":"CONTRIBUTING/#examples","title":"Examples","text":"<p>If a new feature or breaking change is introduced, please update the examples in the <code>examples</code> directory.</p>"},{"location":"CONTRIBUTING/#rules","title":"Rules","text":"<p>The only rule is to keep the code, tests, documentation, build scripts, and examples in sync. If you change something in the code, please update the other relevant files accordingly.</p>"},{"location":"CONTRIBUTING/#faq","title":"FAQ","text":""},{"location":"CONTRIBUTING/#why-is-this-project-written-in-python-will-it-be-rewritten-in-golang-as-its-a-more-common-language-for-exporters","title":"Why is this project written in Python? Will it be rewritten in Golang, as it\u2019s a more common language for exporters?","text":"<p>I chose Python because it's the language I am most comfortable with. From time to time, I have to use Golang, and I have a dozen arguments against using it when I have a choice, but this isn't the right place to discuss these. In other words, I\u2019m not planning to rewrite it in Golang. If you experience any issues with Python, please open an issue, and we\u2019ll try to resolve it.</p>"},{"location":"CONTRIBUTING/#i-have-an-issue-with-the-windowslinux-development-environment-can-you-help-me","title":"I have an issue with the Windows/Linux development environment. Can you help me?","text":"<p>I'm not a Windows user at all. I use Linux on my servers only, not on my laptop. Still, please open an issue and describe your problem; I'll try to help.</p>"},{"location":"CONTRIBUTING/#what-about-building-a-zipapp","title":"What about building a zipapp?","text":"<p>I'm not sure about the benefits of using zipapp. If you have a good reason to use it, please open an issue and describe it. Moreover, zipapp has some limitations, especially with dependencies that include C extensions. There is a Docker image with the <code>py-exporter</code> app, so you can use it without installing any dependencies. You can consult the examples in this repository to see how to install on the target machine without containers.</p>"},{"location":"CREDITS/","title":"Credits","text":"<p>Pavel Sapezhka me@weastur.com</p>"},{"location":"LICENSE/","title":"MIT License","text":"<p>Copyright \u00a9 2024 Pavel Sapezhka</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}